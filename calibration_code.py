# -*- coding: utf-8 -*-
"""calibration_code.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Q186TLXStJ9QXzv9PAJdapMPQIapi0rP
"""

import xml.etree.ElementTree as ET

import numpy as np
import cv2 as cv
import glob
from google.colab.patches import cv2_imshow

# termination criteria
criteria = (cv.TERM_CRITERIA_EPS + cv.TERM_CRITERIA_MAX_ITER, 30, 0.001)
# prepare object points, like (0,0,0), (1,0,0), (2,0,0) ....,(6,5,0)
objp = np.zeros((5*7,3), np.float32)
objp[:,:2] = np.mgrid[0:5,0:7].T.reshape(-1,2)
# Arrays to store object points and image points from all the images.
objpoints = [] # 3d point in real world space
imgpoints = [] # 2d points in image plane.
images = glob.glob('/content/drive/MyDrive/ML Emb/CV_hw3/Calibration_chessboard/*.jpg')
for fname in images:
    img = cv.imread(fname)
    gray = cv.cvtColor(img, cv.COLOR_BGR2GRAY)
    # Find the chess board corners
    ret, corners = cv.findChessboardCorners(gray, (5,7), None)
    # If found, add object points, image points (after refining them)
    if ret == True:
        objpoints.append(objp)
        corners2 = cv.cornerSubPix(gray,corners, (11,11), (-1,-1), criteria)
        imgpoints.append(corners)
        # Draw and display the corners
        cv.drawChessboardCorners(img, (5,7), corners2, ret)
        cv2_imshow( img)
        
cv.destroyAllWindows()



ret, mtx, dist, rvecs, tvecs = cv.calibrateCamera(objpoints, imgpoints, gray.shape[::-1], None, None)

print(mtx, dist)

elem1 = ET.Element('camera_matrix')
elem1.set('type_id', 'opencv-matrix')

element1_1 = ET.SubElement(elem1, 'rows')
element1_1.text ="3"
element2_1 = ET.SubElement(elem1, 'cols')
element2_1.text ="3"
element3_1 = ET.SubElement(elem1, 'data')
element3_1.text =str(mtx).replace(' [', '').replace('[', '').replace(']', '')


elem2 = ET.Element('distortion_coefficients')
elem2.set('type_id', 'opencv-matrix')
element1_1 = ET.SubElement(elem2, 'rows')
element1_1.text ="5"
element2_1 = ET.SubElement(elem2, 'cols')
element2_1.text ="1"
element3_1 = ET.SubElement(elem2, 'data')
element3_1.text =str(dist).replace(' [', '').replace('[', '').replace(']', '')

b_xml = ET.tostring(elem1 )
c_xml = ET.tostring(elem2 )

with open("calibration.xml", "wb") as f:
    f.write(b_xml)
    f.write(c_xml)

